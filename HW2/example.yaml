openapi: 3.0.3
info:
  title: shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        Idlist:
          description: list of the item's ID
          type: array
          items:
            type: integer
            format: int64
        date:
          type: string
          format: date-time
paths:
  /order:
    post:
      summary: add a new order
      operationId: CreateOrder
      parameters:
      - name: body
        in: query
        description: Order object that needs to be posted
        required: true
        schema:
          $ref: '#/components/schemas/Order'
      responses:
        400:
          description: Invalid ID supplied
    get:
      summary: Lists orders sorted by date
      operationId: listOrders
      parameters:
      - name: date_min
        in: query
        description: Lower date limit
        required: false
        schema:
          type: string
          format: date-time
      - name: date_max
        in: query
        description: Upper date limit
        required: false
        schema:
          type: string
          format: date-time
      - name: ascending
        in: query
        description: determines whether sorting is performed in ascending order
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/JSON:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Invalid date range
          content: {}
      security:
      - api_key: []
  /order/{orderID}:
    put:
      summary: updates an order
      operationId: updateOrder
      parameters:
      - name: orderID
        in: path
        description: ID of the order object that needs to be updates
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                list:
                  type: array
                  items:
                    type: integer
                    format: int64
                  description: Updated list of the items' ID in the order
      responses:
        400:
          description: Invalid ID supplied
      security:
      - api_key: []
    get:
      summary: Find order by ID
      operationId: getOrder
      parameters:
      - name: orderID
        in: path
        description: ID of order to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
      security: 
      - api_key: []
  /user/login:
    post:
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      parameters:
      - in: query
        name: body
        description: Item object that needs to be added to the store
        required: true
        schema:
          $ref: '#/components/schemas/Item'
      responses:
        405:
          description: Invalid input
      security:
      - api_key: []
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
  /items/upload_image:
    post:
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: additionalMetadata
        in: query
        description: Additional data to pass to server
        required: true
        schema:
          type: string
      - name: file
        in: query
        description: file to upload
        required: true
        schema:  
          type: string
          format: binary
      responses:
      security:
      - api_key: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                description:
                  type: string
                  description: Updated description of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"